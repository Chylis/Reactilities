// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import UIKit;
@import CoreFoundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSData (SWIFT_EXTENSION(Swiftilities))

/// Returns a formatted Device Token String
- (NSString * _Nonnull)formattedDeviceToken;
@end

@class NSCoder;


/// A utility UIView class which loads and holds a nib-view. Use by calling the 'setViewClass/1' method Access the nib-view by calling the 'view/1' method
SWIFT_CLASS("_TtC12Swiftilities16NibContainerView")
@interface NibContainerView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
@end


@interface UIColor (SWIFT_EXTENSION(Swiftilities))

/// Creates a color from hex
- (nonnull instancetype)initWithHexString:(NSString * _Nonnull)hexString;
@end


@interface UIImage (SWIFT_EXTENSION(Swiftilities))

/// Creates an image from the view
+ (UIImage * _Nonnull)fromView:(UIView * _Nonnull)view;
@end


@interface UIView (SWIFT_EXTENSION(Swiftilities))
@end


@interface UIView (SWIFT_EXTENSION(Swiftilities))

/// Performs a transition animation in a new transaction
///
/// \param duration Duration of the animation. Defaults to 0.25 ms
///
/// \param completion Completion block that is executed after the transaction has been committed
- (void)animateTransition:(CFTimeInterval)duration completion:(void (^ _Nullable)(void))completion;

/// Repeats a view animation 'times' number of times
///
/// Usage example:
///
/// <code>UIView.animateWithRepetition(3, duration: 0.75, after: 0, options: [.Autoreverse],
/// animations: { self.view.transform = CGAffineTransformMakeScale(5.5, 5.5) }) { done in
///   if done {
///     self.view.transform = CGAffineTransformIdentity
///   }
/// }
/// 
/// </code>
/// \param times Number of times to perform the animation
///
/// \param duration The total duration of the animations, measured in seconds. If you specify a negative value or 0, the changes are made without animating them.
///
/// \param after The amount of time (measured in seconds) to wait before beginning the animations. Specify a value of 0 to begin the animations immediately.
///
/// \param options A mask of options indicating how you want to perform the animations. For a list of valid constants, see UIViewAnimationOptions.
///
/// \param animations A block object containing the changes to commit to the views. This is where you programmatically change any animatable properties of the views in your view hierarchy. This block takes no parameters and has no return value. This parameter must not be NULL.
///
/// \param maybeCompletion A block object to be executed when the animation sequence ends. This block has no return value and takes a single Boolean argument that indicates whether or not the animations actually finished before the completion handler was called. If the duration of the animation is 0, this block is performed at the beginning of the next run loop cycle. This parameter may be NULL.
+ (void)animateWithRepetition:(NSInteger)times duration:(NSTimeInterval)duration after:(NSTimeInterval)after options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations maybeCompletion:(void (^ _Nullable)(BOOL))maybeCompletion;
@end


@interface UIView (SWIFT_EXTENSION(Swiftilities))
@end


@interface UIView (SWIFT_EXTENSION(Swiftilities))

/// Traverses the tree of subviews and reports ambigious layout
- (void)reportAmbiguity;

/// Traverses the tree of subviews and lists each view's constraints
- (void)listConstraints;

/// Centers the received subview in self
- (void)centerSubview:(UIView * _Nonnull)subview;
@end

@class NSLayoutConstraint;

@interface UIViewController (SWIFT_EXTENSION(Swiftilities))

/// Utility method for simple dismissal
- (void)dismiss:(BOOL)animated completion:(void (^ _Nullable)(void))completion;

/// Travels the chain of presented view controllers and returns the topmost view controller
- (UIViewController * _Nonnull)currentlyPresentedViewController;

/// Adds a child view contoller to a parent view controller by performing all steps required in the 'add child view controller' process
///
/// \param child The UIViewController to be added as a child view controller
///
/// \param parentView The view to contain the child view controller's view. Defaults to the parent view controller's view
///
/// \param viewConstraints NSLayoutConstraints to be applied to the childs view. Defaults to centering the child view in the parent
- (void)performAddChildViewController:(UIViewController * _Nonnull)child parentView:(UIView * _Nullable)parentView viewConstraints:(NSArray<NSLayoutConstraint *> * _Nullable)viewConstraints;

/// Removes self from the parent view controller by performing all steps required in the 'remove child view controller' process
- (void)performRemoveChildViewController;
@end

#pragma clang diagnostic pop
